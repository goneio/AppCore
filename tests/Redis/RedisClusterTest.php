<?php
namespace Gone\AppCore\Tests\Redis;

use Gone\AppCore\Redis\Redis;
use Gone\AppCore\Test\BaseTestCase;
use Predis;

class RedisClusterTest extends BaseTestCase
{
    /** @var Redis */
    private $redis;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->redis = $this->getApp()->getContainer()->get(Redis::class);
        $this->redis->flushall();
        $this->redis->__clearPerfLog();
    }
    
    public function tearDown()
    {
        echo "\n" . $this->redis->__getPerfLogAsString();
        $this->redis->flushall();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testFlushAll()
    {
        $k = $this->getFaker()->word;
        $v = $this->getFaker()->words(5, true);

        $this->redis->set($k,$v);
        $this->assertEquals($v, $this->redis->get($k));

        $this->redis->flushall();

        $this->assertNotEquals($v, $this->redis->get($k));
        $this->assertEquals("", $this->redis->get($k));
    }

    public function testSet()
    {
        $k = $this->getFaker()->word;
        $v = $this->getFaker()->words(5, true);

        $this->redis->set($k,$v);
        $this->assertEquals($v, $this->redis->get($k));
    }

    public function testMSet()
    {
        $prefix = $this->getFaker()->word;
        $suffixes = $this->getFaker()->words($this->getFaker()->numberBetween(500,2000));

        foreach($suffixes as $suffix){
            $data["{{$prefix}}:{$suffix}"] = $this->getFaker()->numberBetween(10000,99999);
        }

        ksort($data);

        /** @var Predis\Response\Status $status */
        $status = $this->redis->mset($data);

        $this->assertInstanceOf(Predis\Response\Status::class, $status);
        $this->assertEquals("OK", $status->getPayload());

        $this->assertEquals(array_values($data), $this->redis->mget(array_keys($data)));

        $this->assertCount(count($data), $this->redis->keys("*"));
        $this->assertEquals(array_keys($data), array_values($this->redis->keys("*")));

        $this->assertCount(1, $this->redis->keys("*:{$suffixes[0]}"));
        $this->assertCount(count($data),  $this->redis->keys("{{$prefix}}:*"));
    }

    
    
}